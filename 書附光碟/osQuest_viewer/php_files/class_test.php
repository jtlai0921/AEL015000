<?php class test { var $xml_url = 'xmldocs'; var $quizfiles; var $numofquestions; var $error = ''; var $in_question = 0; var $in_section = ''; var $parseXML_cache = null; var $parsed_XML = array(); function test($quizfiles, $numofquestions) { $this->quizfiles = $quizfiles; $this->numofquestions = $numofquestions; } function get_test_xml() { $endofline = "\r\n"; $output = "<QUIZ>" . $endoffile; $chapters = explode(",", $this->quizfiles); mt_srand($this->make_seed()); foreach ($chapters as $chapter_num => $chapter) { $output .= $this->get_questions_xml($chapter); } $output .= "</QUIZ>" . $endoffile; return $output; } function get_questions_xml($chapter) { $this->parseXML_cache = null; $this->parsed_XML = array(); $str = ""; $endofline = "\r\n"; $data = $this->parseXML($chapter); if ( $data !== false ) { $count_a = count($this->parsed_XML); unset($choices); for ($i = 0; $i < $count_a; $i++) $choices[$i] = -1; for ($i = 1; $i <= $this->numofquestions && $i <= $count_a; $i++) { while(1) { $question_num = (mt_rand(1, 100) % $count_a) + 1; if ( $choices[$question_num-1] == -1 ) { $choices[$question_num-1] = 0; break; } } $a = $this->parsed_XML[$question_num]; $str .= "<QUESTION>" . $endofline; $str .= "<TEXT>" . $a['text'] . "</TEXT>" . $endofline; $str .= "<CHOICEA>" . $a['choicea'] . "</CHOICEA>" . $endofline; $str .= "<CHOICEB>" . $a['choiceb'] . "</CHOICEB>" . $endofline; $str .= "<CHOICEC>" . $a['choicec'] . "</CHOICEC>" . $endofline; $str .= "<CHOICED>" . $a['choiced'] . "</CHOICED>" . $endofline; $str .= "<TYPE>" . $a['type'] . "</TYPE>" . $endofline; $str .= "<ANSWER>" . $a['answer'] . "</ANSWER>" . $endofline; $str .= "<EXPLANATION>" . $a['explanation'] . "</EXPLANATION>" . $endofline; $str .= "</QUESTION>" . $endofline; } return $str; } else { $this->error = '錯誤: 沒有測驗內容'; echo $this->quiz_error(); } } function make_seed() { list($usec, $sec) = explode(' ', microtime()); return (float) $sec + ((float) $usec * 100000); } function XML_startTag($parser, $data, $attr) { if (strtolower($data) == 'question') { $this->in_question++; } else { $this->in_section = strtolower($data); } } function XML_contents($parser, $data) { if ($this->in_question > 0 && ($this->in_section == 'text' || strpos($this-> in_section, 'choice') !== false || $this->in_section == 'answer' || $this-> in_section == 'explanation' || $this->in_section == 'type')) { if ($this->in_section == 'answer') { $data = strtolower($data); } $this->parsed_XML[$this->in_question][$this->in_section] = $data; } } function XML_endTag($parser, $data) { if (strtolower($data) == 'question') { } else { $this->in_section = ''; } } function parseXML($file) { if ($this->parseXML_cache === null) { $file = str_replace('\\', '/', $this->xml_url . '/' . $file); $this->in_question = 0; $this->in_section = ''; $xml_parser = xml_parser_create(); xml_set_object($xml_parser, $this); xml_set_element_handler($xml_parser, 'XML_startTag', 'XML_endTag'); xml_set_character_data_handler($xml_parser, 'XML_contents'); $fp = fopen($file, 'r'); $data = fread($fp, 80000); if (!(xml_parse($xml_parser, $data, feof($fp)))) { $this->parseXML_cache = false; return false; } xml_parser_free($xml_parser); fclose($fp); foreach ($this->parsed_XML as $a => $value) { if (!isset($this->parsed_XML[$a]['type'])) { $this->parsed_XML[$a]['type'] = 'radio'; } } $this->parseXML_cache = $data; return $data; } else { return $this->parseXML_cache; } } function quiz_error() { return $this->error; } } ?>
